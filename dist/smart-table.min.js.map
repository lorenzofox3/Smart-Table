{"version":3,"sources":["smart-table.min.js"],"names":["ng","undefined","module","run","$templateCache","put","constant","pagination","template","itemsByPage","displayedPages","search","delay","inputEvent","select","mode","selectedClass","sort","ascentClass","descentClass","descendingFirst","skipNatural","pipe","controller","$scope","$parse","$filter","$attrs","copyRefs","src","concat","updateSafeCopy","safeCopy","safeGetter","pipeAfterSafeCopy","ctrl","deepDelete","object","path","indexOf","partials","split","key","pop","parentPath","join","parentObject","Object","keys","length","formatPredicateObject","predicateObject","prop","input","assign","filtered","lastSelected","propertyName","stTable","displayGetter","displaySetter","orderBy","filter","tableState","start","totalItemCount","this","stSafeSrc","$watch","safeSrc","newValue","oldValue","sortBy","predicate","reverse","isFunction","functionName","name","strictsearchEnabledFields","isExactMatchInput","isString","trim","exactmatchPredicateObject","wildcharPredicateObject","output","number","numberOfPages","Math","ceil","slice","parseInt","row","rows","index","isSelected","getFilteredCollection","setFilterFunction","filterName","setSortFunction","sortFunctionName","preventPipeOnWatch","directive","restrict","link","scope","element","attr","stSetFilter","stSetSort","stConfig","$timeout","require","tableCtrl","promise","throttle","stDelay","event","stInputEvent","$observe","value","predicateExpression","stSearch","bind","evt","originalEvent","cancel","target","stSelectMode","$apply","addClass","removeClass","func","getter","isArray","stSort","sortDefault","classAscent","stClassAscent","classDescent","stClassDescent","stateClasses","stSkipNatural","stDescendingFirst","stSortDefault","$eval","stItemsByPage","stDisplayedPages","stPageChange","templateUrl","attrs","stTemplate","redraw","end","i","paginationState","prevPage","currentPage","floor","max","abs","pages","numPages","push","newPage","selectPage","page","config","stPipe","pre","pipePromise","post","angular"],"mappings":"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","file":"smart-table.min.js","sourcesContent":["(function (ng, undefined){\r\n    'use strict';\r\n\nng.module('smart-table', []).run(['$templateCache', function ($templateCache) {\r\n    $templateCache.put('template/smart-table/pagination.html',\r\n        '<nav ng-if=\"numPages && pages.length >= 2\"><ul class=\"pagination\">' +\r\n        '<li ng-repeat=\"page in pages\" ng-class=\"{active: page==currentPage}\"><a href=\"javascript: void(0);\" ng-click=\"selectPage(page)\">{{page}}</a></li>' +\r\n        '</ul></nav>');\r\n}]);\r\n\r\n\nng.module('smart-table')\r\n  .constant('stConfig', {\r\n    pagination: {\r\n      template: 'template/smart-table/pagination.html',\r\n      itemsByPage: 10,\r\n      displayedPages: 5\r\n    },\r\n    search: {\r\n      delay: 400, // ms\r\n      inputEvent: 'input'\r\n    },\r\n    select: {\r\n      mode: 'single',\r\n      selectedClass: 'st-selected'\r\n    },\r\n    sort: {\r\n      ascentClass: 'st-sort-ascent',\r\n      descentClass: 'st-sort-descent',\r\n      descendingFirst: false,\r\n      skipNatural: false,\r\n      delay:300\r\n    },\r\n    pipe: {\r\n      delay: 100 //ms\r\n    }\r\n  });\nng.module('smart-table').controller('stTableController', [\r\n  '$scope',\r\n  '$parse',\r\n  '$filter',\r\n  '$attrs',\r\n  function StTableController($scope, $parse, $filter, $attrs) {\r\n    var propertyName = $attrs.stTable;\r\n    var displayGetter = $parse(propertyName);\r\n    var displaySetter = displayGetter.assign;\r\n    var safeGetter;\r\n    var orderBy = $filter('orderBy');\r\n    var filter = $filter('filter');\r\n    var safeCopy = copyRefs(displayGetter($scope));\r\n    var tableState = {\r\n      sort: {},\r\n      search: {},\r\n      pagination: { start: 0, totalItemCount: 0 }\r\n    };\r\n    var filtered;\r\n    var pipeAfterSafeCopy = true;\r\n    var ctrl = this;\r\n    var lastSelected;\r\n\r\n    function copyRefs(src) {\r\n      return src ? [].concat(src) : [];\r\n    }\r\n\r\n    function updateSafeCopy() {\r\n      safeCopy = copyRefs(safeGetter($scope));\r\n      if (pipeAfterSafeCopy === true) {\r\n        ctrl.pipe();\r\n      }\r\n    }\r\n\r\n    function deepDelete(object, path) {\r\n      if (path.indexOf('.') != -1) {\r\n        var partials = path.split('.');\r\n        var key = partials.pop();\r\n        var parentPath = partials.join('.');\r\n        var parentObject = $parse(parentPath)(object);\r\n        delete parentObject[key];\r\n        if (Object.keys(parentObject).length == 0) {\r\n          deepDelete(object, parentPath);\r\n        }\r\n      } else {\r\n        delete object[path];\r\n      }\r\n    }\r\n\r\n    if ($attrs.stSafeSrc) {\r\n      safeGetter = $parse($attrs.stSafeSrc);\r\n      $scope.$watch(\r\n        function() {\r\n          var safeSrc = safeGetter($scope);\r\n          return safeSrc && safeSrc.length ? safeSrc[0] : undefined;\r\n        },\r\n        function(newValue, oldValue) {\r\n          if (newValue !== oldValue) {\r\n            updateSafeCopy();\r\n          }\r\n        }\r\n      );\r\n      $scope.$watch(\r\n        function() {\r\n          var safeSrc = safeGetter($scope);\r\n          return safeSrc ? safeSrc.length : 0;\r\n        },\r\n        function(newValue, oldValue) {\r\n          if (newValue !== safeCopy.length) {\r\n            updateSafeCopy();\r\n          }\r\n        }\r\n      );\r\n      $scope.$watch(\r\n        function() {\r\n          return safeGetter($scope);\r\n        },\r\n        function(newValue, oldValue) {\r\n          if (newValue !== oldValue) {\r\n            tableState.pagination.start = 0;\r\n            updateSafeCopy();\r\n          }\r\n        }\r\n      );\r\n    }\r\n\r\n    /**\r\n     * sort the rows\r\n     * @param {Function | String} predicate - function or string which will be used as predicate for the sorting\r\n     * @param [reverse] - if you want to reverse the order\r\n     */\r\n    this.sortBy = function sortBy(predicate, reverse) {\r\n      tableState.sort.predicate = predicate;\r\n      tableState.sort.reverse = reverse === true;\r\n\r\n      if (ng.isFunction(predicate)) {\r\n        tableState.sort.functionName = predicate.name;\r\n      } else {\r\n        delete tableState.sort.functionName;\r\n      }\r\n\r\n      tableState.pagination.start = 0;\r\n      return this.pipe();\r\n    };\r\n\r\n    /**\r\n     * search matching rows\r\n     * @param {String} input - the input string\r\n     * @param {String} [predicate] - the property name against you want to check the match, otherwise it will search on all properties\r\n     * @param {String | Function } [comparator] - a comparator to pass to the filter for the (pass true for stric mode)\r\n     * @param {String} [strictsearchEnabledFields] - list of properties aganist which you want to implement strict search\r\n     */\r\n    this.search = function search(input, predicate, strictsearchEnabledFields) {\r\n        var prop = predicate ? predicate : '$';\r\n        var exactMatchProperties = {};\r\n\t\tvar isExactMatchInput = false;\r\n\t\tif(strictsearchEnabledFields){\r\n\t\t exactMatchProperties =strictsearchEnabledFields.split(',');\r\n\t\t isExactMatchInput = exactMatchProperties.indexOf(prop) != -1;\r\n\t\t}\r\n         \r\n        var predicateObject = {};\r\n\r\n        input = ng.isString(input) ? input.trim() : input;\r\n        if (isExactMatchInput) {\r\n            predicateObject = tableState.search.exactmatchPredicateObject || {};\r\n            formatPredicateObject(predicateObject, prop, input);\r\n            tableState.search.exactmatchPredicateObject = predicateObject; \r\n        }\r\n        else {\r\n            predicateObject = tableState.search.wildcharPredicateObject || {};\r\n            formatPredicateObject(predicateObject, prop, input);\r\n            tableState.search.wildcharPredicateObject = predicateObject;\r\n        }\r\n        tableState.pagination.start = 0;\r\n        return this.pipe();\r\n    };\r\n\r\n    function formatPredicateObject(predicateObject, prop, input) {\r\n        $parse(prop).assign(predicateObject, input);\r\n        // to avoid to filter out null value\r\n        if (!input) {\r\n            deepDelete(predicateObject, prop);\r\n        }\r\n        return predicateObject;\r\n    };\r\n\r\n    /**\r\n     * this will chain the operations of sorting and filtering based on the current table state (sort options, filtering, ect)\r\n     */\r\n    this.pipe = function pipe() {\r\n      var pagination = tableState.pagination;\r\n      var output;\r\n      if (tableState.search.wildcharPredicateObject) {\r\n          // Third parameter tell angular to execute an exact match or not. \r\n          filtered = tableState.search.wildcharPredicateObject ? filter(safeCopy, tableState.search.wildcharPredicateObject, false) : safeCopy;\r\n      }\r\n      else {\r\n          filtered = safeCopy;\r\n      }\r\n      \r\n      if (tableState.search.exactmatchPredicateObject) {\r\n          filtered = tableState.search.exactmatchPredicateObject ? filter(filtered, tableState.search.exactmatchPredicateObject, true) : filtered;\r\n      }\r\n      if (tableState.sort.predicate) {\r\n        filtered = orderBy(\r\n          filtered,\r\n          tableState.sort.predicate,\r\n          tableState.sort.reverse\r\n        );\r\n      }\r\n      pagination.totalItemCount = filtered.length;\r\n      if (pagination.number !== undefined) {\r\n        pagination.numberOfPages = filtered.length > 0\r\n          ? Math.ceil(filtered.length / pagination.number)\r\n          : 1;\r\n        pagination.start = pagination.start >= filtered.length\r\n          ? (pagination.numberOfPages - 1) * pagination.number\r\n          : pagination.start;\r\n        output = filtered.slice(\r\n          pagination.start,\r\n          pagination.start + parseInt(pagination.number)\r\n        );\r\n      }\r\n      displaySetter($scope, output || filtered);\r\n    };\r\n\r\n    /**\r\n     * select a dataRow (it will add the attribute isSelected to the row object)\r\n     * @param {Object} row - the row to select\r\n     * @param {String} [mode] - \"single\" or \"multiple\" (multiple by default)\r\n     */\r\n    this.select = function select(row, mode) {\r\n      var rows = copyRefs(displayGetter($scope));\r\n      var index = rows.indexOf(row);\r\n      if (index !== -1) {\r\n        if (mode === 'single') {\r\n          row.isSelected = row.isSelected !== true;\r\n          if (lastSelected) {\r\n            lastSelected.isSelected = false;\r\n          }\r\n          lastSelected = row.isSelected === true ? row : undefined;\r\n        } else {\r\n          rows[index].isSelected = !rows[index].isSelected;\r\n        }\r\n      }\r\n    };\r\n\r\n    /**\r\n     * take a slice of the current sorted/filtered collection (pagination)\r\n     *\r\n     * @param {Number} start - start index of the slice\r\n     * @param {Number} number - the number of item in the slice\r\n     */\r\n    this.slice = function splice(start, number) {\r\n      tableState.pagination.start = start;\r\n      tableState.pagination.number = number;\r\n      return this.pipe();\r\n    };\r\n\r\n    /**\r\n     * return the current state of the table\r\n     * @returns {{sort: {}, search: {}, pagination: {start: number}}}\r\n     */\r\n    this.tableState = function getTableState() {\r\n      return tableState;\r\n    };\r\n\r\n    this.getFilteredCollection = function getFilteredCollection() {\r\n      return filtered || safeCopy;\r\n    };\r\n\r\n    /**\r\n     * Use a different filter function than the angular FilterFilter\r\n     * @param filterName the name under which the custom filter is registered\r\n     */\r\n    this.setFilterFunction = function setFilterFunction(filterName) {\r\n      filter = $filter(filterName);\r\n    };\r\n\r\n    /**\r\n     * Use a different function than the angular orderBy\r\n     * @param sortFunctionName the name under which the custom order function is registered\r\n     */\r\n    this.setSortFunction = function setSortFunction(sortFunctionName) {\r\n      orderBy = $filter(sortFunctionName);\r\n    };\r\n\r\n    /**\r\n     * Usually when the safe copy is updated the pipe function is called.\r\n     * Calling this method will prevent it, which is something required when using a custom pipe function\r\n     */\r\n    this.preventPipeOnWatch = function preventPipe() {\r\n      pipeAfterSafeCopy = false;\r\n    };\r\n  }\r\n]).directive('stTable', function() {\r\n  return {\r\n    restrict: 'A',\r\n    controller: 'stTableController',\r\n    link: function(scope, element, attr, ctrl) {\r\n      if (attr.stSetFilter) {\r\n        ctrl.setFilterFunction(attr.stSetFilter);\r\n      }\r\n\r\n      if (attr.stSetSort) {\r\n        ctrl.setSortFunction(attr.stSetSort);\r\n      }\r\n    }\r\n  };\r\n});\r\n\nng.module('smart-table')\r\n  .directive('stSearch', ['stConfig', '$timeout','$parse', function (stConfig, $timeout, $parse) {\r\n    return {\r\n      require: '^stTable',\r\n      link: function (scope, element, attr, ctrl) {\r\n        var tableCtrl = ctrl;\r\n        var promise = null;\r\n        var throttle = attr.stDelay || stConfig.search.delay;\r\n        var event = attr.stInputEvent || stConfig.search.inputEvent;\r\n\r\n        attr.$observe('stSearch', function (newValue, oldValue) {\r\n          var input = element[0].value;\r\n          if (newValue !== oldValue && input) {\r\n            ctrl.tableState().search = {};\r\n            tableCtrl.search(input, newValue);\r\n          }\r\n        });\r\n\r\n        //table state -> view\r\n        scope.$watch(function () {\r\n          return ctrl.tableState().search;\r\n        }, function (newValue, oldValue) {\r\n          var predicateExpression = attr.stSearch || '$';\r\n          if (newValue.predicateObject && $parse(predicateExpression)(newValue.predicateObject) !== element[0].value) {\r\n            element[0].value = $parse(predicateExpression)(newValue.predicateObject) || '';\r\n          }\r\n        }, true);\r\n\r\n        // view -> table state\r\n        element.bind(event, function (evt) {\r\n          evt = evt.originalEvent || evt;\r\n          if (promise !== null) {\r\n            $timeout.cancel(promise);\r\n          }\r\n\r\n          promise = $timeout(function () {\r\n            tableCtrl.search(evt.target.value, attr.stSearch || '', attr.strictsearchEnabledFields );\r\n            promise = null;\r\n          }, throttle);\r\n        });\r\n      }\r\n    };\r\n  }]);\r\n\nng.module('smart-table')\r\n  .directive('stSelectRow', ['stConfig', function (stConfig) {\r\n    return {\r\n      restrict: 'A',\r\n      require: '^stTable',\r\n      scope: {\r\n        row: '=stSelectRow'\r\n      },\r\n      link: function (scope, element, attr, ctrl) {\r\n        var mode = attr.stSelectMode || stConfig.select.mode;\r\n        element.bind('click', function () {\r\n          scope.$apply(function () {\r\n            ctrl.select(scope.row, mode);\r\n          });\r\n        });\r\n\r\n        scope.$watch('row.isSelected', function (newValue) {\r\n          if (newValue === true) {\r\n            element.addClass(stConfig.select.selectedClass);\r\n          } else {\r\n            element.removeClass(stConfig.select.selectedClass);\r\n          }\r\n        });\r\n      }\r\n    };\r\n  }]);\r\n\nng.module('smart-table')\r\n  .directive('stSort', ['stConfig', '$parse', '$timeout', function (stConfig, $parse, $timeout) {\r\n    return {\r\n      restrict: 'A',\r\n      require: '^stTable',\r\n      link: function (scope, element, attr, ctrl) {\r\n\r\n        var predicate = attr.stSort;\r\n        var getter = $parse(predicate);\r\n        var index = 0;\r\n        var classAscent = attr.stClassAscent || stConfig.sort.ascentClass;\r\n        var classDescent = attr.stClassDescent || stConfig.sort.descentClass;\r\n        var stateClasses = [classAscent, classDescent];\r\n        var sortDefault;\r\n        var skipNatural = attr.stSkipNatural !== undefined ? attr.stSkipNatural : stConfig.sort.skipNatural;\r\n        var descendingFirst = attr.stDescendingFirst !== undefined ? attr.stDescendingFirst : stConfig.sort.descendingFirst;\r\n        var promise = null;\r\n        var throttle = attr.stDelay || stConfig.sort.delay;\r\n\r\n        if (attr.stSortDefault) {\r\n          sortDefault = scope.$eval(attr.stSortDefault) !== undefined ? scope.$eval(attr.stSortDefault) : attr.stSortDefault;\r\n        }\r\n\r\n        //view --> table state\r\n        function sort () {\r\n          if (descendingFirst) {\r\n            index = index === 0 ? 2 : index - 1;\r\n          } else {\r\n            index++;\r\n          }\r\n\r\n          var func;\r\n          predicate = ng.isFunction(getter(scope)) || ng.isArray(getter(scope)) ? getter(scope) : attr.stSort;\r\n          if (index % 3 === 0 && !!skipNatural !== true) {\r\n            //manual reset\r\n            index = 0;\r\n            ctrl.tableState().sort = {};\r\n            ctrl.tableState().pagination.start = 0;\r\n            func = ctrl.pipe.bind(ctrl);\r\n          } else {\r\n            func = ctrl.sortBy.bind(ctrl, predicate, index % 2 === 0);\r\n          }\r\n          if (promise !== null) {\r\n            $timeout.cancel(promise);\r\n          }\r\n          if (throttle < 0) {\r\n            func();\r\n          } else {\r\n            promise = $timeout(func, throttle);\r\n          }\r\n        }\r\n\r\n        element.bind('click', function sortClick () {\r\n          if (predicate) {\r\n            scope.$apply(sort);\r\n          }\r\n        });\r\n\r\n        if (sortDefault) {\r\n          index = sortDefault === 'reverse' ? 1 : 0;\r\n          sort();\r\n        }\r\n\r\n        //table state --> view\r\n        scope.$watch(function () {\r\n          return ctrl.tableState().sort;\r\n        }, function (newValue) {\r\n          if (newValue.predicate !== predicate) {\r\n            index = 0;\r\n            element\r\n              .removeClass(classAscent)\r\n              .removeClass(classDescent);\r\n          } else {\r\n            index = newValue.reverse === true ? 2 : 1;\r\n            element\r\n              .removeClass(stateClasses[index % 2])\r\n              .addClass(stateClasses[index - 1]);\r\n          }\r\n        }, true);\r\n      }\r\n    };\r\n  }]);\r\n\nng.module('smart-table')\r\n  .directive('stPagination', ['stConfig', function (stConfig) {\r\n    return {\r\n      restrict: 'EA',\r\n      require: '^stTable',\r\n      scope: {\r\n        stItemsByPage: '=?',\r\n        stDisplayedPages: '=?',\r\n        stPageChange: '&'\r\n      },\r\n      templateUrl: function (element, attrs) {\r\n        if (attrs.stTemplate) {\r\n          return attrs.stTemplate;\r\n        }\r\n        return stConfig.pagination.template;\r\n      },\r\n      link: function (scope, element, attrs, ctrl) {\r\n\r\n        scope.stItemsByPage = scope.stItemsByPage ? +(scope.stItemsByPage) : stConfig.pagination.itemsByPage;\r\n        scope.stDisplayedPages = scope.stDisplayedPages ? +(scope.stDisplayedPages) : stConfig.pagination.displayedPages;\r\n\r\n        scope.currentPage = 1;\r\n        scope.pages = [];\r\n\r\n        function redraw () {\r\n          var paginationState = ctrl.tableState().pagination;\r\n          var start = 1;\r\n          var end;\r\n          var i;\r\n          var prevPage = scope.currentPage;\r\n          scope.totalItemCount = paginationState.totalItemCount;\r\n          scope.currentPage = Math.floor(paginationState.start / paginationState.number) + 1;\r\n\r\n          start = Math.max(start, scope.currentPage - Math.abs(Math.floor(scope.stDisplayedPages / 2)));\r\n          end = start + scope.stDisplayedPages;\r\n\r\n          if (end > paginationState.numberOfPages) {\r\n            end = paginationState.numberOfPages + 1;\r\n            start = Math.max(1, end - scope.stDisplayedPages);\r\n          }\r\n\r\n          scope.pages = [];\r\n          scope.numPages = paginationState.numberOfPages;\r\n\r\n          for (i = start; i < end; i++) {\r\n            scope.pages.push(i);\r\n          }\r\n\r\n          if (prevPage !== scope.currentPage) {\r\n            scope.stPageChange({newPage: scope.currentPage});\r\n          }\r\n        }\r\n\r\n        //table state --> view\r\n        scope.$watch(function () {\r\n          return ctrl.tableState().pagination;\r\n        }, redraw, true);\r\n\r\n        //scope --> table state  (--> view)\r\n        scope.$watch('stItemsByPage', function (newValue, oldValue) {\r\n          if (newValue !== oldValue) {\r\n            scope.selectPage(1);\r\n          }\r\n        });\r\n\r\n        scope.$watch('stDisplayedPages', redraw);\r\n\r\n        //view -> table state\r\n        scope.selectPage = function (page) {\r\n          if (page > 0 && page <= scope.numPages) {\r\n            ctrl.slice((page - 1) * scope.stItemsByPage, scope.stItemsByPage);\r\n          }\r\n        };\r\n\r\n        if (!ctrl.tableState().pagination.number) {\r\n          ctrl.slice(0, scope.stItemsByPage);\r\n        }\r\n      }\r\n    };\r\n  }]);\r\n\nng.module('smart-table')\r\n  .directive('stPipe', ['stConfig', '$timeout', function (config, $timeout) {\r\n    return {\r\n      require: 'stTable',\r\n      scope: {\r\n        stPipe: '='\r\n      },\r\n      link: {\r\n\r\n        pre: function (scope, element, attrs, ctrl) {\r\n\r\n          var pipePromise = null;\r\n\r\n          if (ng.isFunction(scope.stPipe)) {\r\n            ctrl.preventPipeOnWatch();\r\n            ctrl.pipe = function () {\r\n\r\n              if (pipePromise !== null) {\r\n                $timeout.cancel(pipePromise)\r\n              }\r\n\r\n              pipePromise = $timeout(function () {\r\n                scope.stPipe(ctrl.tableState(), ctrl);\r\n              }, config.pipe.delay);\r\n\r\n              return pipePromise;\r\n            }\r\n          }\r\n        },\r\n\r\n        post: function (scope, element, attrs, ctrl) {\r\n          ctrl.pipe();\r\n        }\r\n      }\r\n    };\r\n  }]);\r\n\n})(angular);"]}